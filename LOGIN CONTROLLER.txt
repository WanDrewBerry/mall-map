LOGIN CONTROLLER

const jwt = require('jsonwebtoken');
const User = require('../models/User');

const loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Find the user by email
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Invalid email or password" });
    }

    // Compare the provided password with the hashed one
    const validPassword = await user.comparePassword(password);
    if (!validPassword) {
      return res.status(400).json({ message: "Invalid email or password" });
    }

    // Set default name for admin if name is not provided
    const name = user.name || (user.role === 'admin' ? 'admin' : user.username);
    console.log("Name being used for token:", name);

    // Generate access token (short-lived)
    const accessToken = jwt.sign(
      { id: user._id, name, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "15m" } // Access token expires in 15 minutes
    );

    // Generate refresh token (long-lived)
    const refreshToken = jwt.sign(
      { id: user._id },
      process.env.JWT_REFRESH_SECRET,
      { expiresIn: "7d" } // Refresh token expires in 7 days
    );

    // Send refresh token as HTTP-only cookie
    res.cookie('refreshToken', refreshToken, {
      httpOnly: true,
      secure: true, // Use true in production (requires HTTPS)
      sameSite: 'strict', // Prevent CSRF
      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 days
    });

    // Send access token to the client
    res.status(200).json({
      message: "Login successful!",
      accessToken,
    });
  } catch (err) {
    console.error("Login error:", err);
    res.status(500).json({ message: "Server error during login" });
  }
};

module.exports = { loginUser };